>>> text_indentation = __import__('5-text_indentation').text_indentation

-----------------------------------------------------
Test with different type and various input format
-----------------------------------------------------
>>> text_indentation("one ?two:three.")
one ?
<BLANKLINE>
two:
<BLANKLINE>
three.
<BLANKLINE>

>>> text_indentation("Hello 'man'")
Hello 'man'

>>> text_indentation("Hello.. . 'man'")
Hello.
<BLANKLINE>
.
<BLANKLINE>
.
<BLANKLINE>
'man'

>>> text_indentation("Hello..   ?")
Hello.
<BLANKLINE>
.
<BLANKLINE>
?
<BLANKLINE>

>>> text_indentation("Hello..   ?     .")
Hello.
<BLANKLINE>
.
<BLANKLINE>
?
<BLANKLINE>
.
<BLANKLINE>

>>> text_indentation(".")
.
<BLANKLINE>

>>> text_indentation("")

>>> text_indentation(56)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/jeff/holbertonschool-higher_level_programming/python-test_driven_development/5-text_indentation.py", line 11, in text_indentation
    raise TypeError("text must be a string")
TypeError: text must be a string

>>> text_indentation(5.65)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/jeff/holbertonschool-higher_level_programming/python-test_driven_development/5-text_indentation.py", line 11, in text_indentation
    raise TypeError("text must be a string")
TypeError: text must be a string

>>> text_indentation({'coucou': 2})
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/jeff/holbertonschool-higher_level_programming/python-test_driven_development/5-text_indentation.py", line 11, in text_indentation
    raise TypeError("text must be a string")
TypeError: text must be a string

>>> text_indentation(["test."])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/jeff/holbertonschool-higher_level_programming/python-test_driven_development/5-text_indentation.py", line 11, in text_indentation
    raise TypeError("text must be a string")
TypeError: text must be a string

>>> text_indentation(""".Hello "boss""")
.
<BLANKLINE>
Hello "boss

>>> text_indentation(""".Hello "boss""" + "salut")
.
<BLANKLINE>
Hello "bosssalut

>>> text_indentation(("hello"))
hello

>>> text_indentation("56")
56

>>> text_indentation(True)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/jeff/holbertonschool-higher_level_programming/python-test_driven_development/5-text_indentation.py", line 12, in text_indentation
    raise TypeError("text must be a string")
TypeError: text must be a string

>>> text_indentation("5.6")
5.
<BLANKLINE>
6

text_indentation("without ponctuation")
without ponctuation

>>> text_indentation("lkerjfmoaeidhvfomekjfl첫kqsjdf!lkmj첫pze.zec_hzidsuchmoaz")
lkerjfmoaeidhvfomekjfl첫kqsjdf!lkmj첫pze.

zec_hzidsuchmoaz