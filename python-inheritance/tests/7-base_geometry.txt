>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> integer_validator = __import__('7-base_geometry').BaseGeometry.integer_validator
>>> geo = BaseGeometry()
>>> integer_validator = integer_validator()
>>> geo.area()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/jeff/holbertonschool-higher_level_programming/python-inheritance/7-base_geometry.py", line 15, in area
    raise Exception("area() is not implemented")
Exception: area() is not implemented
>>> geo.integer_validator("name", "John")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/jeff/holbertonschool-higher_level_programming/python-inheritance/7-base_geometry.py", line 19, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: name must be an integer
>>> geo.integer_validator()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'
>>> geo.integer_validator("name")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'
>>> geo.integer_validator("name", 0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/jeff/holbertonschool-higher_level_programming/python-inheritance/7-base_geometry.py", line 21, in integer_validator
    raise ValueError("{} must be greater than 0".format(name))
ValueError: name must be greater than 0
>>> geo.integer_validator("name", -3)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/jeff/holbertonschool-higher_level_programming/python-inheritance/7-base_geometry.py", line 21, in integer_validator
    raise ValueError("{} must be greater than 0".format(name))
ValueError: name must be greater than 0
>>> geo.integer_validator("name", (4, 5))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/jeff/holbertonschool-higher_level_programming/python-inheritance/7-base_geometry.py", line 19, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: name must be an integer
>>> geo.integer_validator("name", [4, 5])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/jeff/holbertonschool-higher_level_programming/python-inheritance/7-base_geometry.py", line 19, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: name must be an integer
>>> geo.integer_validator("name", False)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/jeff/holbertonschool-higher_level_programming/python-inheritance/7-base_geometry.py", line 19, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: name must be an integer
>>> geo.integer_validator("name", {1})
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/jeff/holbertonschool-higher_level_programming/python-inheritance/7-base_geometry.py", line 19, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: name must be an integer
>>> geo.integer_validator("name", None)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/jeff/holbertonschool-higher_level_programming/python-inheritance/7-base_geometry.py", line 19, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: name must be an integer